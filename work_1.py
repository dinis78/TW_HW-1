import numpy as np
from math import factorial

# №1. Из колоды в 52 карты извлекаются случайным образом 4 карты. 
# a) Найти вероятность того, что все карты – крести.


# def cross (n,k):  # подмножество крестей
#     return np.math.factorial(n) // (np.math.factorial(k) * np.math.factorial (n-k))
# m=cross (13, 4)

# def combinations (n,k):  # 4 карты из общей колоды
#     return np.math.factorial(n) // (np.math.factorial(k) * np.math.factorial (n-k))
# n=combinations (52, 4)

# print('Вероятность что выпадут крести =', m/n)

##########################################################

# б) Найти вероятность, что среди 4-х карт окажется хотя бы один туз.

# перестановка тузов = 1

# def combinations (n,k):  # Сочетания без тузов
#     return np.math.factorial(n) // (np.math.factorial(k) * np.math.factorial (n-k))
# m=combinations (48, 4)

# def combinations_1 (n,k):  # Сочетания с тузами
#     return np.math.factorial(n) // (np.math.factorial(k) * np.math.factorial (n-k))
# n=combinations_1 (52, 4)

# p = 1-(m/n)
# print('Вероятность того что окажется хотябы один туз =', p)

####################################################################################
####################################################################################

#№2. На входной двери подъезда установлен кодовый замок, содержащий десять кнопок с цифрами от 0 до 9. 
# Код содержит три цифры, которые нужно нажать одновременно. 
# Какова вероятность того, что человек, не знающий код, откроет дверь с первой попытки?

# def combinations (n,k):  # Размещение
#     return np.math.factorial(n) // np.math.factorial (n-k)
# a=combinations (10, 3)

# print('Вероятнрость открытия двери с первой попытки = ', 1/a)


##########################################################################################
##########################################################################################

# №3. В ящике имеется 15 деталей, из которых 9 окрашены. 
# Рабочий случайным образом извлекает 3 детали. Какова вероятность того, 
# что все извлеченные детали окрашены?

# def combinations (n,k):  # Сочетания окрашеных деталей
#     return np.math.factorial(n) // (np.math.factorial(k) * np.math.factorial (n-k))
# m=combinations (9, 3)


# def combinations_1 (n,k):  # Общее сочетание 
#     return np.math.factorial(n) // (np.math.factorial(k) * np.math.factorial (n-k))
# n=combinations_1 (15, 3)

# p = (m/n)
# print('Вероятность извлечения окрашенных деталей =', p)


################################################################################
################################################################################

# №4. В лотерее 100 билетов. Из них 2 выигрышных. 
# Какова вероятность того, что 2 приобретенных билета окажутся выигрышными?

m=2 # число появления событий
n=100 # общее число событий
p=m/n
print('Вероятность выигрошных билетов =', p)